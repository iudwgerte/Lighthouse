#ifndef ATTACKS_HPP
#define ATTACKS_HPP

#include "sliders.hpp"
#include "types.hpp"

// clang-format off

constexpr Bitboard PAWN_ATTACKS_TABLE[COLOR_NB][SQUARE_NB] = {
    { 0x200ull, 0x500ull, 0xa00ull, 0x1400ull,
      0x2800ull, 0x5000ull, 0xa000ull, 0x4000ull,
      0x20000ull, 0x50000ull, 0xa0000ull, 0x140000ull,
      0x280000ull, 0x500000ull, 0xa00000ull, 0x400000ull,
      0x2000000ull, 0x5000000ull, 0xa000000ull, 0x14000000ull,
      0x28000000ull, 0x50000000ull, 0xa0000000ull, 0x40000000ull,
      0x200000000ull, 0x500000000ull, 0xa00000000ull, 0x1400000000ull,
      0x2800000000ull, 0x5000000000ull, 0xa000000000ull, 0x4000000000ull,
      0x20000000000ull, 0x50000000000ull, 0xa0000000000ull, 0x140000000000ull,
      0x280000000000ull, 0x500000000000ull, 0xa00000000000ull, 0x400000000000ull,
      0x2000000000000ull, 0x5000000000000ull, 0xa000000000000ull, 0x14000000000000ull,
      0x28000000000000ull, 0x50000000000000ull, 0xa0000000000000ull, 0x40000000000000ull,
      0x200000000000000ull, 0x500000000000000ull, 0xa00000000000000ull, 0x1400000000000000ull,
      0x2800000000000000ull, 0x5000000000000000ull, 0xa000000000000000ull, 0x4000000000000000ull,
      0x00000000000000000ull, 0x00000000000000000ull, 0x00000000000000000ull, 0x00000000000000000ull,
      0x000000000000000000ull, 0x000000000000000000ull, 0x000000000000000000ull, 0x000000000000000000ull },
      { 0x0ull, 0x0ull, 0x0ull, 0x0ull,
        0x0ull, 0x0ull, 0x0ull, 0x0ull,
        0x2ull, 0x5ull, 0xaull, 0x14ull,
        0x28ull, 0x50ull, 0xa0ull, 0x40ull,
        0x200ull, 0x500ull, 0xa00ull, 0x1400ull,
        0x2800ull, 0x5000ull, 0xa000ull, 0x4000ull,
        0x20000ull, 0x50000ull, 0xa0000ull, 0x140000ull,
        0x280000ull, 0x500000ull, 0xa00000ull, 0x400000ull,
        0x2000000ull, 0x5000000ull, 0xa000000ull, 0x14000000ull,
        0x28000000ull, 0x50000000ull, 0xa0000000ull, 0x40000000ull,
        0x200000000ull, 0x500000000ull, 0xa00000000ull, 0x1400000000ull,
        0x2800000000ull, 0x5000000000ull, 0xa000000000ull, 0x4000000000ull,
        0x20000000000ull, 0x50000000000ull, 0xa0000000000ull, 0x140000000000ull,
        0x280000000000ull, 0x500000000000ull, 0xa00000000000ull, 0x400000000000ull,
        0x2000000000000ull, 0x5000000000000ull, 0xa000000000000ull, 0x14000000000000ull,
        0x28000000000000ull, 0x50000000000000ull, 0xa0000000000000ull, 0x40000000000000ull
      }
};

// clang-format on

constexpr Bitboard KNIGHT_ATTACKS_TABLE[SQUARE_NB] = {
    0x0000000000020400ull, 0x0000000000050800ull, 0x00000000000A1100ull,
    0x0000000000142200ull, 0x0000000000284400ull, 0x0000000000508800ull,
    0x0000000000A01000ull, 0x0000000000402000ull, 0x0000000002040004ull,
    0x0000000005080008ull, 0x000000000A110011ull, 0x0000000014220022ull,
    0x0000000028440044ull, 0x0000000050880088ull, 0x00000000A0100010ull,
    0x0000000040200020ull, 0x0000000204000402ull, 0x0000000508000805ull,
    0x0000000A1100110Aull, 0x0000001422002214ull, 0x0000002844004428ull,
    0x0000005088008850ull, 0x000000A0100010A0ull, 0x0000004020002040ull,
    0x0000020400040200ull, 0x0000050800080500ull, 0x00000A1100110A00ull,
    0x0000142200221400ull, 0x0000284400442800ull, 0x0000508800885000ull,
    0x0000A0100010A000ull, 0x0000402000204000ull, 0x0002040004020000ull,
    0x0005080008050000ull, 0x000A1100110A0000ull, 0x0014220022140000ull,
    0x0028440044280000ull, 0x0050880088500000ull, 0x00A0100010A00000ull,
    0x0040200020400000ull, 0x0204000402000000ull, 0x0508000805000000ull,
    0x0A1100110A000000ull, 0x1422002214000000ull, 0x2844004428000000ull,
    0x5088008850000000ull, 0xA0100010A0000000ull, 0x4020002040000000ull,
    0x0400040200000000ull, 0x0800080500000000ull, 0x1100110A00000000ull,
    0x2200221400000000ull, 0x4400442800000000ull, 0x8800885000000000ull,
    0x100010A000000000ull, 0x2000204000000000ull, 0x0004020000000000ull,
    0x0008050000000000ull, 0x00110A0000000000ull, 0x0022140000000000ull,
    0x0044280000000000ull, 0x0088500000000000ull, 0x0010A00000000000ull,
    0x0020400000000000ull};

constexpr Bitboard KING_ATTACKS_TABLE[SQUARE_NB] = {
    0x0000000000000302ull, 0x0000000000000705ull, 0x0000000000000E0Aull,
    0x0000000000001C14ull, 0x0000000000003828ull, 0x0000000000007050ull,
    0x000000000000E0A0ull, 0x000000000000C040ull, 0x0000000000030203ull,
    0x0000000000070507ull, 0x00000000000E0A0Eull, 0x00000000001C141Cull,
    0x0000000000382838ull, 0x0000000000705070ull, 0x0000000000E0A0E0ull,
    0x0000000000C040C0ull, 0x0000000003020300ull, 0x0000000007050700ull,
    0x000000000E0A0E00ull, 0x000000001C141C00ull, 0x0000000038283800ull,
    0x0000000070507000ull, 0x00000000E0A0E000ull, 0x00000000C040C000ull,
    0x0000000302030000ull, 0x0000000705070000ull, 0x0000000E0A0E0000ull,
    0x0000001C141C0000ull, 0x0000003828380000ull, 0x0000007050700000ull,
    0x000000E0A0E00000ull, 0x000000C040C00000ull, 0x0000030203000000ull,
    0x0000070507000000ull, 0x00000E0A0E000000ull, 0x00001C141C000000ull,
    0x0000382838000000ull, 0x0000705070000000ull, 0x0000E0A0E0000000ull,
    0x0000C040C0000000ull, 0x0003020300000000ull, 0x0007050700000000ull,
    0x000E0A0E00000000ull, 0x001C141C00000000ull, 0x0038283800000000ull,
    0x0070507000000000ull, 0x00E0A0E000000000ull, 0x00C040C000000000ull,
    0x0302030000000000ull, 0x0705070000000000ull, 0x0E0A0E0000000000ull,
    0x1C141C0000000000ull, 0x3828380000000000ull, 0x7050700000000000ull,
    0xE0A0E00000000000ull, 0xC040C00000000000ull, 0x0203000000000000ull,
    0x0507000000000000ull, 0x0A0E000000000000ull, 0x141C000000000000ull,
    0x2838000000000000ull, 0x5070000000000000ull, 0xA0E0000000000000ull,
    0x40C0000000000000ull};

constexpr Bitboard pawn_attacks(Color c, Square s) { return PAWN_ATTACKS_TABLE[c][s]; }
constexpr Bitboard knight_attacks(Square s) { return KNIGHT_ATTACKS_TABLE[s]; }
constexpr Bitboard bishop_attacks(Square s, Bitboard occ) { return get_bishop_attacks(s, occ); }
constexpr Bitboard rook_attacks(Square s, Bitboard occ) { return get_rook_attacks(s, occ); }
constexpr Bitboard queen_attacks(Square s, Bitboard occ) { return get_queen_attacks(s, occ); }
constexpr Bitboard king_attacks(Square s) { return KING_ATTACKS_TABLE[s]; }

#endif
